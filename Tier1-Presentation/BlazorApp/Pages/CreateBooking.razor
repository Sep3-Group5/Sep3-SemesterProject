@page "/CreateBooking"
@* @attribute [Authorize] *@
@using Domain.Models
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IPatientService PatientService
@inject IBookingService BookingService
@inject NavigationManager NavMgr

<div class="card">
    <h3>CreateBooking</h3>
    <div class="form-group field">
        <label>Description:</label>
        <input type="text" @bind="bookingDescription"/> 
    </div>
    <div class="form-group field">
        <label>Date:</label>
        <InputDate @bind-Value="bookingDate"/>
    </div>
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private IEnumerable<Patient>? patients;
    private int? selectedUserId;
    private DateTime bookingDate;
    private string bookingDescription = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            patients = await PatientService.GetPatientsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        
        if (string.IsNullOrEmpty(bookingDescription))
        {
            msg = "Description cannot be empty!";
            return;
        }

        try
        {
            BookingCreationDto dto = new((int)selectedUserId, bookingDescription, bookingDate); //select somehow the user that created this post
            await BookingService.CreateAsync(dto);
            NavMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}