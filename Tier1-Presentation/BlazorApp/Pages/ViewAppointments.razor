@page "/ViewAppointments"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IAppointmentService AppointmentService

<div>
	<button @onclick="LoadAppointments">Load</button>
</div>

@if (appointments == null)
{
}
else if (!appointments.Any())
	{
		<p>No Appointments to display</p>
	}
else{

	<h2>Patient: patientName with id: patientId </h2>
	<table class="table">
		<thead>
		<tr>
			<th>Appointment ID</th>
			<th>Doctor ID</th>
			<th>Diagnostic</th>
			<th>Status</th>
			<th>Date</th>
			<th>Time</th>
		</tr>
		</thead>

		<tbody>
		@foreach (var appointment in appointments)
		{
			<tr>
				<td>@appointment.Id</td>
				<td>@appointment.DoctorId</td>
				<td>@appointment.Diagnostic</td>
				<td>@appointment.Status</td>
				<td>@appointment.Date</td>
				<td>@appointment.Time</td>
			</tr>
		}
		</tbody>
	</table>
}

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
	private IEnumerable<Appointment> appointments;
	private string msg = "";

	private int idFilter;
	private int patientIdFilter;
	private int doctorIdFilter;
	private string didagnosticFilter;
	private bool statusFilter;
	private string dateFilter;
	private string timeFilter;

	private async Task LoadAppointments()
	{
		try
		{
			appointments = await AppointmentService.GetAsync(idFilter, patientIdFilter, doctorIdFilter, didagnosticFilter, statusFilter, dateFilter, timeFilter);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			msg = e.Message;
		}
	}
}

